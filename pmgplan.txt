; if the frame changed or the vertical position changed
; then we redraw.   This should be evaluated earlier
; then reflected in the vsPmgSeqRedraw flag

; Like so:

	lda currentframe,x
	cmp prevframe,x
	bne definitelyredraw

	lda prevvpos,x
	cmp newvpos,x
	bne definitelyredraw

5 from  to
6  .     * 
7  .     *
8  *     *
9  *     .
10 *     .

prevvpos=8
newvpos=6
frameheight=3
anim_adr
pm_adr
blank_at_end = prevpos-newvpos =2

;===============================================================================
; Redraw the current PMOBJECT.
;
; Code that modifies the vertical position or changes the animation frame 
; number for the object will automatically increment vsPmgSeqRedraw to
; indicate the P/M image must be redrawn.
; This is also forced when setting a new animation.
;
; X = current pmobject. (also in zbPmgCurrentIdent)

libPmgSeqRedraw 
	lda vsPmgSeqRedraw,x ; Is object X flagged to redraw?
	bne bPmgRedraw       ; Yes.  Do it.

bExitNoRedraw
	rts                  ; Leave.

bPmgRedraw
	lda #0               ; Turn off Redraw flag
	sta vsPmgSeqRedraw,x

	ldy vsPmgIdent,x     ; Get current P/M graphics (hardware) ID
	sty zbPmgIdent       ; Save in case routine needs it again.

	cpy #PMGNOOBJECT     ; Is it assigned to a real P/M object?
	beq bExitNoRedraw    ; No.  Exit.
	cpy #8               ; Is it > 7? ( >=  8 is logically > 7)
	bcs bExitNoRedraw    ; If so, then exit.
	; technically, cpy #8 also catches the value of #PMGNOOBJECT, so the 
	; initial comparison was not needed. 

	; Valid P/M identity.
	; Is this a fifth player child object?
	lda vsPmgFifth,x
	cmp #FIFTH_PLAYER_CHILD
	beq bExitNoRedraw    ; Yes, do not redraw.

	; Use alternative (player) mask for fifth player.
	cmp #FIFTH_PLAYER    ; Is it the parent object?
	bne bCopyPMGMasks    ; No.  Copy masks as-is.
	lda vsPmgMaskAND_OFF ; Yes.  Copy regular Player mask to Missile.
	sta zbPmgMaskAND_OFF
	lda vsPmgMaskAND_ON
	sta zbPmgMaskAND_ON
	beq bCheckForPMGZero  ; Because we know the player ON mask is 0.

	; Save the mask info for the object.
	; For reference, when Missiles are processed:
	; P/M Memory = (P/M Memory AND vsPmgMaskAND_OFF) OR (Image AND vsPmgMaskAND_ON)
	; if pmid = 0, 1, 2, 3 then the default mask does no masking.
bCopyPMGMasks
	lda vsPmgMaskAND_OFF,y ; retrieved by PM Ident in Y
	sta zbPmgMaskAND_OFF
	lda vsPmgMaskAND_ON,y
	sta zbPmgMaskAND_ON

;===============================================================================
; Forced Blanking the P/M image.
;
; Yes, under most circumstance forced blanking the P/M image and 
; redrawing the image are largely redundant.  But general purpose 
; library means results must be consistent and predictable.  When 
; switching between animations of different sizes it is possible 
; there may be residual bytes of the previous animation image left
; behind. The safest thing to do it remove the previous image. 
; Remember, this wastefulness does not happen all the time.

; P/M image memory map address is needed for clearing the P/M image 
; byte map, and for copying the animation image to the P/M memory,
; so this value is established now.  However, the P/M memory 
; addressing method is different between clearing the image and 
; copying the image. In both cases we need the high byte of the 
; address, but for clearing the memory the low byte is the start 
; of the page.
;
; Therefore, the High Byte is always from the table.
; For clearing the image the Low Byte is 0 and the Y register 
; will be the vertical position.

bCheckForPMGZero
	; Set the high byte, because it will be used for the image 
	; copying later even if the current image will not be cleared.
	lda vsPmgRamAddrHi,y
	sta zwPmgAddr+1

	; Is frame blanking set?  
	; The library sets a forced blank which is needed when 
	; switching between Animation sequences of different sizes.
	lda vsPmgSeqBlank,x
	beq bPMGDrawImageSetup ; Nope. Do not zero the current P/M image

	lda #0        ; Low byte is 0, because Y will be Prev Vpos
	sta zwPmgAddr

	ldy vsPmgPrevVPos,x ; CHANGED Y!  Lost hardware ID.
	lda vsPrevHeight,x  
	pha                 ; save height until we evaluate some other things.

	lda zbPmgMaskAND_ON ; If this is zero, then this is for a player.
	beq bDoZeroPlayerImage

	; Zero Missile Image 

	pla     ; get height
	tax     ; CHANGED X!  (height)  Lost the PM Object index.

	; Now, at this point the target PM/M address is set, 
	; Y contains the starting location offset in memory (vpos),
	; X contains the height of the object (number of bytes to zero) 

bWriteZeroMissileImage   ; used when Missiles are separated
	lda (zwPmgAddr),Y    ; Get Missile byte
	and zbPmgMaskAND_OFF ; Turn off the missile's bits.
	sta (zwPmgAddr),Y    ; Put the byte back
	iny
	beq bPMGDrawImageSetup ; Safety.  If Y wraps to 0, then we're leaving the P/M bitmap.
	dex
	bne bWriteZeroMissileImage ; until height is reached.
	beq bPMGDrawImageSetup

bDoZeroPlayerImage
	pla     ; Get height
	tax     ; CHANGED X!  (height)  Lost the PM Object index.

	; Now, at this point the target PM/M address is set, 
	; Y contains the starting location offset in memory (vpos),
	; X contains the height of the object (number of bytes to zero) 

	lda #0

bWriteZeroPlayerImage   ; used when Missiles are separated
	sta (zwPmgAddr),Y   ; Set Player byte
	iny
	beq bPMGDrawImageSetup ; Safety.  If Y wraps to 0, then we're leaving the P/M bitmap.
	dex
	bne bWriteZeroPlayerImage ; until height is reached.

;===============================================================================

bPMGDrawImageSetup
	ldx zbPmgCurrentIdent ; X may have been changed. Reload as object ID.

	ldy vsSeqFrameCurrent,x ; Y = index into frame numbers
	
    ; Get the Frame address 

    lda vsFrameAddrLo,y      ; Copy frame address to zero page for later.
    sta zwFrameAddr
    lda vsFrameAddrHi,y
    sta zwFrameAddr+1

	lda vsFrameHeight,y      ; Copy current frame height to zero page for later.
	sta zbFrameHeight
	sta vsPrevHeight,x       ; also update last height as the current height.

;===============================================================================
; Load zwPmgAddr with address of image in P/M memory.
; This means the real vertical position plus the base 
; address of one of the PM graphics object memory maps.
; Note that vertical position plus the low byte of the 
; address to the memory map will not exceed the range
; of the one-byte value range.  (In other words, the 
; math never carries to the high byte).

; The memory management of the Player/Missile is different
; depending on the direction of movement.   When the image
; moves up the screen, then routine draws the image first
; and erases the exposed remains of the previous frame at 
; the botttom. When the image moves down the reverse occurs:
; the routine must erase the trailing residue first at the 
; top, then copy the image data into memory at the new position.

; Therefore the "start" of the P/M address is based on the 
; previous vertical position when the new image location 
; moves down the screen, and on the new vertical position 
; when the new image moves up the screen.

; The high byte is always from the table, and was loaded earlier.
; For copying the image the Low Byte will be vertical position and
; the Y register will be 0, counting forward. 

	ldy zbPmgIdent ; Y = P/M hardware ID to get memory map

; Which direction?
	lda vsPmgPrevVPos,x
	cmp vsPmgRealVPos,x
	beq bRedrawCurrentPosition ; prev = new
	bcc bRedrawMoveDown        ; prev < new
;	bcs bRedrawMoveUp          ; prev > new

bRedrawCurrentPosition ; The same as moving up without the clearing action.
bRedrawMoveUp
	lda vsPmgRealVPos,x

; For Single Line Resolution
; .if PMG_RES=PM_1LINE_RESOLUTION then low byte = real vpos
;   nop ; figured out there was nothing to do
; .endif

; For Double Line Resolution:
.if PMG_RES=PM_2LINE_RESOLUTION ; then low byte = real vpos + pmadr low byte
	clc
	adc vsPmgRamAddrLo,y
.endif

	sta zwPmgAddr  ; save low byte of starting P/M memory address

	clc
	lda vsPmgPrevVPos,x ; Previous vpos - Real vpos = lines at bottom to zero.
	sbc vsPmgRealVPos,x
	sta zbPmgLinesToZero

	ldx zbFrameHeight        ; determined earlier
	jsr libPmgCopyFrameToPM

	ldx zbPmgLinesToZero
	beq bSkipZeroLines ; This could be true if redrawn at same postion.
	jsr libPmgZeroLinesToPMBottom
bSkipZeroLines

	rts


bRedrawMoveDown 
	lda vsPmgPrevVPos,x

; For Single Line Resolution
; if PMG_RES=PM_1LINE_RESOLUTION then low byte = prev vpos

; For Double Line Resolution:
.if PMG_RES=PM_2LINE_RESOLUTION ; then low byte = prev vpos + pmadr low byte
	clc
	adc vsPmgRamAddrLo,y
.endif

	sta zwPmgAddr

	clc 
	lda vsPmgRealVPos,x ; Real vpos - Previous vpos = lines at top to zero.
	sbc vsPmgPrevVPos,x
	sta zbPmgLinesToZero ; not really needed.  using in X immediately.

	tax ; save number of zero lines
	jsr libPmgZeroLinesToPMTop

	ldx zwFrameHeight
	jsr libPmgCopyFrameToPM

	rts


;===============================================================================
; Copy the current Frame data to P/M memory.
;
; zbPmgMaskAND_OFF = Mask to set Missile bits off; ($FF for players)
; zbPmgMaskAND_ON  = Mask to set Missile Bits on.  ($00 for Players)
;
; zwFrameAddr = Address of frame image
; zwPmgAddr   = Address in P/M memory to begin.  (PMADR+VPos)
;
; X = frame height

libPmgCopyFrameToPM
	ldy #0

	lda zbPmgMaskAND_ON
	beq bLoopCopyFramePlayer    ; Because we know the player ON mask is 0.

; Missiles share P/M image memory.  Therefore animation frames
; and P/M image memory must be mask to combine only the bits
; that apply to the missile.

bLoopCopyFrameMissile
	lda (zwFrameAddr),y  ; Get animation frame
	and zbPmgMaskAND_ON  ; Keep only the frame image bits for missile.
	sta zbTemp           ; Save to merge with Missile memory.
	lda (zwPmgAddr),Y    ; Get Missile byte
	and zbPmgMaskAND_OFF ; Turn off the missile's bits.
	ora zbTemp           ; Combine frame bits with Missile byte
	sta (zwPmgAddr),Y    ; Save to Missile memory.
	iny
	dex ; frame height
	bne bLoopCopyFramePlayer
	rts

; Players, just a strip-o-bytes.
; Same logic for Fifth player, missiles immitating a player.
bLoopCopyFramePlayer
	lda (zwFrameAddr),y
	sta (zwPmgAddr),y
	iny
	dex ; frame height
	bne bLoopCopyFramePlayer
	rts


;===============================================================================
; Clear/write zero bytes to the lines at the 
; top of the P/M image that are unneeded when
; the P/M image moves down.
;
; The reason Y is not incremented is that PmgAddr points
; to data BEFORE the new/current image in P/M memory.
; That data needs to be cleared and the address incremented
; until it reaches the actual location of the P/M image.
; Then the next action would be to copy the image to 
; P/M Memory (libPmgCopyFrameToPM) which expects to use
; Y as the index looping through memory. 
;
; zbPmgMaskAND_OFF = Mask to set Missile bits off; ($FF for players)
; zbPmgMaskAND_ON  = Mask to set Missile Bits on.  ($00 for Players)
;
; zwPmgAddr   = Address in P/M memory to begin.  (PMADR+VPos)
;
; X = height
; Y = 0

libPmgZeroLinesToPMTop
	lda zbPmgMaskAND_ON
	beq bZeroPlayerTop    ; Because we know the player ON mask is 0.

	; Missile zero, twiddle bits...

bLoopZeroLinesMissileTop
	lda (zwPmgAddr),Y    ; Get Missile byte
	and zbPmgMaskAND_OFF ; Turn off the missile's bits.
	sta (zwPmgAddr),Y    ; Put the byte back
	inc zwPmgAddr
	beq bExitPmgZeroLinesToPMTop; if this wraps to 0 then we're done.
	dex ; height
	bne bLoopZeroLinesMissileTop
	rts

	; Player.  Just zero the bytes.

	bZeroPlayerTop
	lda #0
bLoopZeroLinesPlayerTop
	sta (zwPmgAddr),y
	inc zwPmgAddr
	beq bExitPmgZeroLinesToPMTop; if this wraps to 0 then we're done.
	dex ; height
	bne bLoopZeroLinesPlayerTop

bExitPmgZeroLinesToPMTop
	rts


;===============================================================================
; Clear/write zero bytes to the lines at the 
; bottom of the P/M image that are unneeded when
; the P/M image moves up.
;
; Y is incremented here, because the image was drawn
; into P/M memory by libPmgCopyFrameToPM and Y is 
; now the correct index for the next byte following
; the image. 
;
; X = height
; Y = index in P/M image.


libPmgZeroLinesToPMBottom
	lda #0
	
bLoopZeroLinesPMBottom
	sta (zwPmgAddr),y
	iny
	dex ; height
	bne bLoopZeroLinesPMBottom
        
	rts


libPmgZeroVposToFrameHeight

